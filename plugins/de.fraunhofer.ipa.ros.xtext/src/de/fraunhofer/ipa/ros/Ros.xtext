// automatically generated by Xtext
grammar de.fraunhofer.ipa.ros.Ros with org.eclipse.xtext.common.Terminals

import "http://www.ipa.fraunhofer.de/ros" 
import "http://www.ipa.fraunhofer.de/primitives" as primitives
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

PackageSet returns PackageSet:
	{PackageSet}
	'PackageSet'
	'{'
		('package' '{' package+=Package ( "," package+=Package)* '}' )?
	'}';

Package returns Package:
	Package_Impl | CatkinPackage;

SpecBase returns primitives::SpecBase:
	ServiceSpec | TopicSpec | ActionSpec;

Dependency returns Dependency:
	PackageDependency | ExternalDependency;


Namespace returns Namespace:
	GlobalNamespace | RelativeNamespace_Impl | PrivateNamespace;

Package_Impl returns Package:
	{Package}
	'Package'
	name=EString
	'{'
		('spec' '{' spec+=SpecBase ( "," spec+=SpecBase)* '}' )?
		('artifact' '{' artifact+=Artifact ( "," artifact+=Artifact)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;
	
RosNames returns ecore::EString:
	ROS_CONVENTION_A | ID
;


terminal ROS_CONVENTION_A:
	( ('/' ID ) | ( ID '/' ) )* ;


Artifact returns Artifact:
	{Artifact}
	'Artifact'
	name=RosNames
	'{'
		('node' node=Node)?
	'}';

CatkinPackage returns CatkinPackage:
	{CatkinPackage}
	'CatkinPackage'
	name=RosNames
	'{'
		('spec' '{' spec+=SpecBase ( "," spec+=SpecBase)* '}' )?
		('artifact' '{' artifact+=Artifact ( "," artifact+=Artifact)* '}' )?
		('dependency' '{' dependency+=Dependency ( "," dependency+=Dependency)* '}' )?
	'}';

ServiceSpec returns primitives::ServiceSpec:
	{primitives::ServiceSpec}
	'ServiceSpec'
	name=EString
	'{'
		('request' request=MessageDefinition)?
		('response' response=MessageDefinition)?
	'}';

TopicSpec returns primitives::TopicSpec:
	{primitives::TopicSpec}
	'TopicSpec'
	name=(EString|'Header')
	'{'
		('message' message=MessageDefinition)?
	'}';

ActionSpec returns primitives::ActionSpec:
	{primitives::ActionSpec}
	'ActionSpec'
	name=EString
	'{'
		('goal' goal=MessageDefinition)?
		('result' result=MessageDefinition)?
		('feedback' feedback=MessageDefinition)?
	'}';


MessageDefinition returns primitives::MessageDefinition:
	{primitives::MessageDefinition}
	'{'
		( MessagePart+=MessagePart ( MessagePart+=MessagePart)* )?
	'}';

Node returns Node:
	'Node'
	'{'
		'name' name=RosNames
		('serviceserver' '{' serviceserver+=ServiceServer ( "," serviceserver+=ServiceServer)* '}' )?
		('publisher' '{' publisher+=Publisher ( "," publisher+=Publisher)* '}' )?
		('subscriber' '{' subscriber+=Subscriber ( "," subscriber+=Subscriber)* '}' )?
		('serviceclient' '{' serviceclient+=ServiceClient ( "," serviceclient+=ServiceClient)* '}' )?
		('actionserver' '{' actionserver+=ActionServer ( "," actionserver+=ActionServer)* '}' )?
		('actionclient' '{' actionclient+=ActionClient ( "," actionclient+=ActionClient)* '}' )?
		('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
	'}';

ServiceServer returns ServiceServer:
	'ServiceServer'
	'{'
		'name' name=EString
		'service' service=[primitives::ServiceSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

Publisher returns Publisher:
	'Publisher'
	'{'
		'name' name=EString
		'message' message=[primitives::TopicSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

Subscriber returns Subscriber:
	'Subscriber'
	'{'
		'name' name=EString
		'message' message=[primitives::TopicSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

ServiceClient returns ServiceClient:
	'ServiceClient'
	'{'
		'name' name=EString
		'service' service=[primitives::ServiceSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

ActionServer returns ActionServer:
	'ActionServer'
	'{'
		'name' name=EString
		'action' action=[primitives::ActionSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

ActionClient returns ActionClient:
	'ActionClient'
	'{'
		'name' name=EString
		'action' action=[primitives::ActionSpec|EString]
		('namespace' namespace=Namespace)?
	'}';

GraphName returns GraphName:
	'GraphName' ;


//PARAMETERS DEFINITION

ParameterType returns ParameterType:
	ParameterListType | ParameterStructType | ParameterIntegerType | ParameterStringType | ParameterDoubleType | ParameterDateType | ParameterBooleanType | ParameterBase64Type | ParameterAnyType | ParameterArrayType;

ParameterValue returns ParameterValue:
	ParameterAny | ParameterString | ParameterBase64 | ParameterInteger | ParameterDouble | ParameterBoolean | ParameterSequence | ParameterStruct | ParameterDate;


Parameter returns Parameter:
	'Parameter'
	'{'
		'name' name=EString
		('namespace' namespace=Namespace)?
		'type' type=ParameterType
	'}';

GlobalNamespace returns GlobalNamespace:
	{GlobalNamespace}
	'GlobalNamespace'
	'{'
		('parts' '{' parts+=GraphName ( "," parts+=GraphName)* '}' )?
	'}';

RelativeNamespace_Impl returns RelativeNamespace:
	{RelativeNamespace}
	'RelativeNamespace'
	'{'
		('parts' '{' parts+=GraphName ( "," parts+=GraphName)* '}' )?
	'}';

PrivateNamespace returns PrivateNamespace:
	{PrivateNamespace}
	'PrivateNamespace'
	'{'
		('parts' '{' parts+=GraphName ( "," parts+=GraphName)* '}' )?
	'}';

ParameterListType returns ParameterListType:
	{ParameterListType}
	'ParameterListType'
	'{'
		('sequence' '{' sequence+=ParameterType ( "," sequence+=ParameterType)* '}' )?
		('default' default=ParameterSequence)?
	'}';

ParameterStructType returns ParameterStructType:
	{ParameterStructType}
	'ParameterStructType'
	'{'
		('parameterstructypetmember' '{' parameterstructypetmember+=ParameterStructTypeMember ( "," parameterstructypetmember+=ParameterStructTypeMember)* '}' )?
	'}';

ParameterIntegerType returns ParameterIntegerType:
	{ParameterIntegerType}
	'ParameterIntegerType'
	'{'
		('default' default=ParameterInteger)?
	'}';

ParameterStringType returns ParameterStringType:
	{ParameterStringType}
	'ParameterStringType'
	'{'
		('default' default=ParameterString)?
	'}';

ParameterDoubleType returns ParameterDoubleType:
	{ParameterDoubleType}
	'ParameterDoubleType'
	'{'
		('default' default=ParameterDouble)?
	'}';

ParameterDateType returns ParameterDateType:
	{ParameterDateType}
	'ParameterDateType'
	'{'
		('default' default=ParameterDate)?
	'}';

ParameterBooleanType returns ParameterBooleanType:
	{ParameterBooleanType}
	'ParameterBooleanType'
	'{'
		('default' default=ParameterBoolean)?
	'}';

ParameterBase64Type returns ParameterBase64Type:
	{ParameterBase64Type}
	'ParameterBase64Type'
	'{'
		('default' default=ParameterBase64)?
	'}';

ParameterAnyType returns ParameterAnyType:
	{ParameterAnyType}
	'ParameterAnyType'
	'{'
		('default' default=ParameterAny)?
	'}';

ParameterArrayType returns ParameterArrayType:
	'ParameterArrayType'
	'{'
		'type' type=ParameterType
		('default' default=ParameterSequence)?
	'}';

ParameterSequence returns ParameterSequence:
	{ParameterSequence}
	'ParameterSequence'
	'{'
		('value' '{' value+=ParameterValue ( "," value+=ParameterValue)* '}' )?
	'}';

ParameterAny returns ParameterAny:
	{ParameterAny}
	'ParameterAny'
	'{'
		('value' value=EString)?
	'}';

ParameterString returns ParameterString:
	'ParameterString'
	'{'
		'value' value=EString
	'}';

ParameterBase64 returns ParameterBase64:
	'ParameterBase64'
	'{'
		'value' value=Base64Binary
	'}';

ParameterInteger returns ParameterInteger:
	'ParameterInteger'
	'{'
		'value' value=Int0
	'}';

ParameterDouble returns ParameterDouble:
	'ParameterDouble'
	'{'
		'value' value=Double
	'}';

ParameterBoolean returns ParameterBoolean:
	'ParameterBoolean'
	'{'
		'value' value=Boolean
	'}';

ParameterStruct returns ParameterStruct:
	{ParameterStruct}
	'ParameterStruct'
	'{'
		('value' '{' value+=ParameterStructMember ( "," value+=ParameterStructMember)* '}' )?
	'}';

ParameterDate returns ParameterDate:
	'ParameterDate'
	'{'
		'value' value=DateTime
	'}';

Base64Binary returns type::Base64Binary:
	'Base64Binary' ;

Int0 returns type::Int:
	'Int' ;

Double returns type::Double:
	'Double';

Boolean returns type::Boolean:
	'Boolean';

ParameterStructMember returns ParameterStructMember:
	'ParameterStructMember'
	name=EString
	'{'
		'value' value=ParameterValue
	'}';

DateTime returns type::DateTime:
	'DateTime' ;

ParameterStructTypeMember returns ParameterStructTypeMember:
	'ParameterStructTypeMember'
	name=EString
	'{'
		'type' type=ParameterType
		('default' default=ParameterStruct)?
	'}';

PackageDependency returns PackageDependency:
	'PackageDependency'
	'{'
		'package' package=[Package|EString]
	'}';

ExternalDependency returns ExternalDependency:
	{ExternalDependency}
	'ExternalDependency'
	name=EString;
	

//MESSAGE PRIMITIVES DEFINITION


MessagePart returns primitives::MessagePart:
	Type = AbstractType
	Data =(KEYWORD | MESSAGE_ASIGMENT | EString)
;

terminal MESSAGE_ASIGMENT:
	((ID|STRING)'='(ID|STRING|INT|'-'INT))
;

AbstractType returns primitives::AbstractType:
	bool | int8 | uint8 | int16 | uint16 | int32 | uint32 | int64 | uint64 | float32 | float64 | string0 | byte | time | duration | Header |
	boolArray | int8Array | uint8Array | int16Array | uint16Array | int32Array | uint32Array | int64Array | uint64Array | float32Array | float64Array | string0Array | byteArray | 
	TopicSpecRef | ArrayTopicSpecRef ;


bool returns primitives::bool:
	{primitives::bool}
	'bool'
	;

int8 returns primitives::int8:
	{primitives::int8}
	'int8'
	;

uint8 returns primitives::uint8:
	{primitives::uint8}
	'uint8'
	;

int16 returns primitives::int16:
	{primitives::int16}
	'int16'
	;

uint16 returns primitives::uint16:
	{primitives::uint16}
	'uint16'
	;

int32 returns primitives::int32:
	{primitives::int32}
	'int32'
	;

uint32 returns primitives::uint32:
	{primitives::uint32}
	'uint32'
	;

int64 returns primitives::int64:
	{primitives::int64}
	'int64'
	;

uint64 returns primitives::uint64:
	{primitives::uint64}
	'uint64'
	;

float32 returns primitives::float32:
	{primitives::float32}
	'float32'
	;

float64 returns primitives::float64:
	{primitives::float64}
	'float64'
	;

string0 returns primitives::string:
	{primitives::string}
	'string'
	;
	
byte returns primitives::Byte:
	{primitives::Byte}
	'byte'
	;

time returns primitives::time:
	{primitives::time}
	'time'
	;

duration returns primitives::duration:
	{primitives::duration}
	'duration'
	;

boolArray returns primitives::boolArray:
	{primitives::boolArray}
	'bool[]'
	;

int8Array returns primitives::int8Array:
	{primitives::int8Array}
	'int8[]'
	;

uint8Array returns primitives::uint8Array:
	{primitives::uint8Array}
	'uint8[]'
	;

int16Array returns primitives::int16Array:
	{primitives::int16Array}
	'int16[]'
	;

uint16Array returns primitives::uint16Array:
	{primitives::uint16Array}
	'uint16[]'
	;

int32Array returns primitives::int32Array:
	{primitives::int32Array}
	'int32[]'
	;

uint32Array returns primitives::uint32Array:
	{primitives::uint32Array}
	'uint32[]'
	;

int64Array returns primitives::int64Array:
	{primitives::int64Array}
	'int64[]'
	;

uint64Array returns primitives::uint64Array:
	{primitives::uint64Array}
	'uint64[]'
	;

float32Array returns primitives::float32Array:
	{primitives::float32Array}
	'float32[]'
	;

float64Array returns primitives::float64Array:
	{primitives::float64Array}
	'float64[]'
	;

string0Array returns primitives::stringArray:
	{primitives::stringArray}
	'string[]'
	;
byteArray returns primitives::ByteArray:
	{primitives::ByteArray}
	'byte[]'
	;
	
Header returns primitives::Header:
	{primitives::Header}
	'Header'
;

TopicSpecRef returns primitives::TopicSpecRef:
	TopicSpec=[primitives::TopicSpec|EString]
;

ArrayTopicSpecRef returns primitives::ArrayTopicSpecRef:
	TopicSpec=[primitives::TopicSpec|EString]'[]'
;

KEYWORD: 'goal' | 'message' | 'result' | 'feedback' | 'name' | 'value' | 'service' | 'type' | 'action' | 'duration' | 'time'  ;
